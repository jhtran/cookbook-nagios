###########################################################################
# Managed by Chef
#
# RESOURCE.CFG - Resource File for Nagios
#
# You can define $USERx$ macros in this file, which can in turn be used
# in command definitions in your host config file(s).  $USERx$ macros are
# useful for storing sensitive information such as usernames, passwords,
# etc.  They are also handy for specifying the path to plugins and
# event handlers - if you decide to move the plugins or event handlers to
# a different directory in the future, you can just update one or two
# $USERx$ macros, instead of modifying a lot of command definitions.
#
# The CGIs will not attempt to read the contents of resource files, so
# you can set restrictive permissions (600 or 660) on them.
#
# Nagios supports up to 32 $USERx$ macros ($USER1$ through $USER32$)
#
# Resource files may also be used to store configuration directives for
# external data sources like MySQL...
#
###########################################################################

# Sets $USER1$ to be the path to the plugins
$USER1$=/usr/lib/nagios/plugins

<% if node[:roles].include?(node[:nagios][:server_role]) -%>
# $USER2$ will be the condition for whether or not nagios is up on the primary.
# On the primary itself we want this to always be false so notifies are sent.
$USER2$="/bin/false"
<% elsif node[:roles].include?(node[:nagios][:server_standby_role]) -%>
# $USER2$ will be the condition for whether or not nagios is up on the primary.
# On the standby, as long as this returns OK (or true) we will not send notifies.
$USER2$="/usr/lib/nagios/plugins/check_nrpe -H <%= @primary_ip %> -c check_nagios -t 1"
<% end -%>

# Sets $USER2$ to be the path to event handlers
#$USER2$=/usr/lib/nagios/plugins/eventhandlers

# Store some usernames and passwords (hidden from the CGIs)
#$USER3$=someuser
#$USER4$=somepassword
